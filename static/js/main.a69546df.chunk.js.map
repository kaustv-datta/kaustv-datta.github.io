{"version":3,"sources":["Board/Cell/index.js","Board/Wall/index.js","Board/fibonacci.js","Board/index.js","App/index.js","reportWebVitals.js","index.js"],"names":["Cell","React","memo","number","identifier","onCellClick","cellState","type","className","onClick","propTypes","PropTypes","isRequired","string","func","defaultProps","Wall","isPerfectSquare","x","s","Math","round","sqrt","isFibonacci","n","areFibonacciAdjacent","n1","n2","abs","min","list","results","forwardBuffer","reverseBuffer","i","length","j","forwardItem","reverseItem","Infinity","push","lenght","init","board","isActive","userClicks","updatingRow","updatingColumn","clearingCells","reducer","state","action","payload","Error","Board","dim","mathjs","useReducer","dispatch","useEffect","newBoard","count","row","toArray","col","map","item","rowResults","Fibonacci","colResults","indexCount","consecutiveIndexes","forEach","columnIndex","join","Array","fill","rowIndex","setTimeout","indexStr","split","Number","prevVal","subset","keys","boardObj","content","value","cellIndex","cellRow","cellCol","includes","getCellsHTML","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a69546df.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css';\r\n\r\nconst Cell = React.memo(({ number, identifier, onCellClick, cellState }) => (\r\n  <button\r\n    type=\"button\"\r\n    className={`box ${cellState}`}\r\n    identifier={identifier}\r\n    onClick={() => {\r\n      onCellClick(identifier);\r\n    }}\r\n  >\r\n    {number}\r\n  </button>\r\n));\r\n\r\nCell.propTypes = {\r\n  number: PropTypes.number.isRequired,\r\n  identifier: PropTypes.string.isRequired,\r\n  onCellClick: PropTypes.func.isRequired,\r\n  cellState: PropTypes.string,\r\n};\r\n\r\nCell.defaultProps = {\r\n  cellState: 'normal',\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nfunction Wall() {\r\n  return <div className=\"wall\" />;\r\n}\r\n\r\nexport default Wall;\r\n","const isPerfectSquare = (x) => {\r\n  const s = Math.round(Math.sqrt(x));\r\n  return s * s === x;\r\n};\r\n\r\nconst isFibonacci = (n) => isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);\r\n\r\nconst areFibonacciAdjacent = (n1, n2) => {\r\n  // special cases\r\n  if (n2 < n1) {\r\n    return false;\r\n  }\r\n  if (n1 === n2) {\r\n    return n1 === 1;\r\n  }\r\n  if (n1 === 0 && n2 === 1) {\r\n    return true;\r\n  }\r\n  if (n1 === 1 && n2 === 2) {\r\n    return true;\r\n  }\r\n  // general cases\r\n  return Math.abs(n2 - n1) < Math.min(n1, n2);\r\n};\r\n\r\nconst getFibonacciSeriesIndexes = (list) => {\r\n  const results = [];\r\n  let forwardBuffer = [];\r\n  let reverseBuffer = [];\r\n\r\n  for (let i = 0; i < list.length; i += 1) {\r\n    const j = list.length - 1 - i;\r\n    const forwardItem = list[i];\r\n    const reverseItem = list[j];\r\n\r\n    // left to right lookup\r\n    if (forwardItem !== -Infinity) {\r\n      if (isFibonacci(forwardItem)) {\r\n        if (forwardBuffer.length === 0) {\r\n          forwardBuffer.push(i);\r\n        } else if (\r\n          areFibonacciAdjacent(list[forwardBuffer[forwardBuffer.length - 1]], forwardItem)\r\n        ) {\r\n          // special case - [1,1,1]\r\n          if (\r\n            forwardBuffer.length >= 2 &&\r\n            forwardItem === 1 &&\r\n            list[forwardBuffer[forwardBuffer.length - 1]] === 1 &&\r\n            list[forwardBuffer[forwardBuffer.length - 2]] === 1\r\n          ) {\r\n            forwardBuffer = [forwardBuffer[forwardBuffer.length - 1], i];\r\n          } else {\r\n            forwardBuffer.push(i);\r\n          }\r\n        } else if (forwardBuffer.length >= 5) {\r\n          results.push([...forwardBuffer]);\r\n          forwardBuffer = [i];\r\n        } else {\r\n          forwardBuffer = [i];\r\n        }\r\n      } else if (forwardBuffer.length >= 5) {\r\n        results.push([...forwardBuffer]);\r\n        forwardBuffer = [];\r\n      } else {\r\n        forwardBuffer = [];\r\n      }\r\n    }\r\n\r\n    // right to left lookup\r\n    if (reverseItem !== -Infinity) {\r\n      if (isFibonacci(reverseItem)) {\r\n        if (reverseBuffer.length === 0) {\r\n          reverseBuffer.push(j);\r\n        } else if (\r\n          areFibonacciAdjacent(list[reverseBuffer[reverseBuffer.length - 1]], reverseItem)\r\n        ) {\r\n          // special case - [1,1,1]\r\n          if (\r\n            reverseBuffer.length >= 2 &&\r\n            reverseItem === 1 &&\r\n            list[reverseBuffer[reverseBuffer.length - 1]] === 1 &&\r\n            list[reverseBuffer[reverseBuffer.length - 2]] === 1\r\n          ) {\r\n            reverseBuffer = [reverseBuffer[reverseBuffer.length - 1], j];\r\n          } else {\r\n            reverseBuffer.push(j);\r\n          }\r\n        } else if (reverseBuffer.length >= 5) {\r\n          results.push([...reverseBuffer]);\r\n          reverseBuffer = [j];\r\n        } else {\r\n          reverseBuffer = [j];\r\n        }\r\n      } else if (reverseBuffer.length >= 5) {\r\n        results.push([...reverseBuffer]);\r\n        reverseBuffer = [];\r\n      } else {\r\n        reverseBuffer = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (forwardBuffer.lenght >= 5) {\r\n    results.push(forwardBuffer);\r\n  }\r\n  if (reverseBuffer.lenght >= 5) {\r\n    results.push(reverseBuffer);\r\n  }\r\n\r\n  return results;\r\n};\r\n\r\nexport default { getFibonacciSeriesIndexes };\r\n","import React, { useEffect, useReducer } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as mathjs from 'mathjs';\r\n\r\nimport Cell from './Cell';\r\nimport Wall from './Wall';\r\nimport Fibonacci from './fibonacci';\r\n\r\nimport './style.css';\r\n\r\nconst ANIMATION_TIMEOUT = 300;\r\n\r\nfunction init(board) {\r\n  return {\r\n    board,\r\n    isActive: true,\r\n    userClicks: 0,\r\n    updatingRow: -1,\r\n    updatingColumn: -1,\r\n    clearingCells: [],\r\n  };\r\n}\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'update_board':\r\n      return {\r\n        ...state,\r\n        board: action.payload,\r\n        isActive: true,\r\n        updatingRow: -1,\r\n        updatingColumn: -1,\r\n        clearingCells: [],\r\n      };\r\n    case 'update_board_and_clicks':\r\n      return { ...state, ...action.payload };\r\n    case 'updating_cells':\r\n      return {\r\n        ...state,\r\n        updatingRow: action.payload.updatingRow,\r\n        updatingColumn: action.payload.updatingColumn,\r\n        isActive: false,\r\n      };\r\n    case 'clearing_cells':\r\n      return { ...state, clearingCells: action.payload };\r\n    case 'reset':\r\n      return init(action.payload);\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Board({ dim }) {\r\n  const board = mathjs.zeros(dim, dim);\r\n  const [state, dispatch] = useReducer(reducer, board, init);\r\n\r\n  useEffect(() => {\r\n    let newBoard = mathjs.clone(state.board);\r\n    const clearingCells = [];\r\n\r\n    for (let count = 0; count < dim; count += 1) {\r\n      const row = mathjs.row(state.board, count).toArray()[0];\r\n      const col = mathjs\r\n        .column(state.board, count)\r\n        .toArray()\r\n        .map((item) => item[0]);\r\n      const rowResults = Fibonacci.getFibonacciSeriesIndexes(row);\r\n      const colResults = Fibonacci.getFibonacciSeriesIndexes(col);\r\n\r\n      for (let indexCount = 0; indexCount < rowResults.length; indexCount += 1) {\r\n        const consecutiveIndexes = rowResults[indexCount];\r\n        consecutiveIndexes.forEach((columnIndex) => {\r\n          clearingCells.push([count, columnIndex].join());\r\n        });\r\n        newBoard = mathjs.subset(\r\n          newBoard,\r\n          mathjs.index(count, consecutiveIndexes),\r\n          new Array(consecutiveIndexes.length).fill(-Infinity)\r\n        );\r\n      }\r\n\r\n      for (let indexCount = 0; indexCount < colResults.length; indexCount += 1) {\r\n        const consecutiveIndexes = colResults[indexCount];\r\n        consecutiveIndexes.forEach((rowIndex) => {\r\n          clearingCells.push([rowIndex, count].join());\r\n        });\r\n        newBoard = mathjs.subset(\r\n          newBoard,\r\n          mathjs.index(consecutiveIndexes, count),\r\n          new Array(consecutiveIndexes.length).fill(-Infinity)\r\n        );\r\n      }\r\n    }\r\n    // Highlight green\r\n    dispatch({\r\n      type: 'clearing_cells',\r\n      payload: clearingCells,\r\n    });\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: 'update_board',\r\n        payload: newBoard,\r\n      });\r\n    }, ANIMATION_TIMEOUT);\r\n  }, [state.userClicks]);\r\n\r\n  const onCellClick = (indexStr) => {\r\n    if (state.isActive) {\r\n      const [row, col] = indexStr.split(',').map(Number);\r\n      const prevVal = state.board.subset(mathjs.index(row, col));\r\n      // add 1 to row\r\n      let newBoard = mathjs.subset(\r\n        state.board,\r\n        mathjs.index(row, [...Array(dim).keys()]),\r\n        mathjs.add(mathjs.subset(state.board, mathjs.index(row, [...Array(dim).keys()])), 1)\r\n      );\r\n      // add 1 to col\r\n      newBoard = mathjs.subset(\r\n        newBoard,\r\n        mathjs.index([...Array(dim).keys()], col),\r\n        mathjs.add(mathjs.subset(newBoard, mathjs.index([...Array(dim).keys()], col)), 1)\r\n      );\r\n      // Highlight yellow\r\n      dispatch({\r\n        type: 'updating_cells',\r\n        payload: {\r\n          updatingRow: row,\r\n          updatingColumn: col,\r\n        },\r\n      });\r\n      setTimeout(() => {\r\n        // +1 to clicked cell\r\n        dispatch({\r\n          type: 'update_board_and_clicks',\r\n          payload: {\r\n            board: mathjs.subset(newBoard, mathjs.index(row, col), prevVal + 1),\r\n            userClicks: state.userClicks + 1,\r\n            isActive: false,\r\n          },\r\n        });\r\n      }, ANIMATION_TIMEOUT);\r\n    }\r\n  };\r\n\r\n  const getCellsHTML = (boardObj) => {\r\n    const content = [];\r\n    boardObj.forEach((value, cellIndex) => {\r\n      if (value === -Infinity) {\r\n        content.push(<Wall key={cellIndex.join(',')} />);\r\n      } else {\r\n        const cellRow = cellIndex[0];\r\n        const cellCol = cellIndex[1];\r\n        let cellState = 'normal';\r\n\r\n        if (state.clearingCells.includes(cellIndex.join(','))) {\r\n          cellState = 'clearing';\r\n        } else if (cellRow === state.updatingRow || cellCol === state.updatingColumn) {\r\n          cellState = 'updating';\r\n        }\r\n\r\n        content.push(\r\n          <Cell\r\n            key={cellIndex.join(',')}\r\n            number={value}\r\n            identifier={cellIndex.join(',')}\r\n            onCellClick={onCellClick}\r\n            cellState={cellState}\r\n          />\r\n        );\r\n      }\r\n    });\r\n    return content;\r\n  };\r\n\r\n  return <div className=\"game-board\">{getCellsHTML(state.board)}</div>;\r\n}\r\n\r\nBoard.propTypes = {\r\n  dim: PropTypes.number,\r\n};\r\n\r\nBoard.defaultProps = {\r\n  dim: 50,\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\n\r\nimport Board from '../Board';\r\n\r\nimport './style.css';\r\n\r\nfunction App() {\r\n  return <Board dim={50} />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}